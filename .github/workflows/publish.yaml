name: Publish

on:
  workflow_dispatch:
    inputs:
      dockerTarget:
        description: "Docker Target"
        required: true
        type: choice
        default: "deploy"
        options:
          - deploy
          - gem-cache
          - clean-cache
          - gems
          - base
      cacheTag:
        description: "Cache Tag"
        required: false
        type: choice
        default: "gems"
        options:
          - ''
          - base
          - canary
          - gem-cache
          - gems
env:
  IMAGE_TAG: ghcr.io/kingdonb/stats-tracker-ghcr
  BASE_TAG: base
  GEMS_TAG: gems
  GEM_CACHE_TAG: gem-cache

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@bc1dd263b68cb5626dbb55d5c89777d79372c484
        with:
          ruby-version: '3.1.4'
          bundler-cache: true

      - name: Build and push base
        uses: docker/build-push-action@v4
        if: "${{ github.event.inputs.dockerTarget == 'base'}}"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # sbom: true
          # provenance: true
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ env.IMAGE_TAG }}:${{ env.BASE_TAG }}
          target: base
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push gems
        uses: docker/build-push-action@v4
        if: "${{ github.event.inputs.dockerTarget == 'gems'}}"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # sbom: true
          # provenance: true
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ env.IMAGE_TAG }}:${{ env.GEMS_TAG }}
          target: gems
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CACHE_IMAGE=${{ env.IMAGE_TAG }}:${{ github.event.inputs.cacheTag }}

      - name: Build and push gem-cache
        uses: docker/build-push-action@v4
        if: "${{ github.event.inputs.dockerTarget == 'gem-cache'}}"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # sbom: true
          # provenance: true
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ env.IMAGE_TAG }}:${{ env.GEM_CACHE_TAG }}
          target: gem-cache
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CACHE_IMAGE=${{ env.IMAGE_TAG }}:${{ github.event.inputs.cacheTag }}

      - name: Make clean-cache
        uses: docker/build-push-action@v4
        if: "${{ github.event.inputs.dockerTarget == 'clean-cache'}}"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # sbom: true
          # provenance: true
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ env.IMAGE_TAG }}:${{ env.GEM_CACHE_TAG }}
          target: gem-cache
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # build-args: | ## Empty the cache
          #   CACHE_IMAGE=${{ env.IMAGE_TAG }}:${{ github.event.inputs.cacheTag }}

      - name: Build and push canary
        uses: docker/build-push-action@v4
        if: "${{ github.event.inputs.dockerTarget == 'deploy'}}"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # sbom: true
          # provenance: true
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ env.IMAGE_TAG }}:canary
          target: deploy
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CACHE_IMAGE=${{ env.IMAGE_TAG }}:${{ github.event.inputs.cacheTag }}
