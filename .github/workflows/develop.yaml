name: Develop

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      dockerTarget:
        description: "Docker Target"
        required: false
        type: choice
        default: "deploy"
        options:
          - deploy
          - base
      cacheTag:
        description: "Cache Tag"
        required: false
        type: choice
        default: "gems"
        options:
          - ''
          - gems

env:
  IMAGE_TAG: ghcr.io/kingdonb/stats-tracker-ghcr
  BASE_TAG: base
  GEMS_TAG: gems
  GEM_CACHE_TAG: gem-cache
  WABT_VERSION: 1.0.33
  BINARYEN_VERSION: "113"
  DOCKER_TARGET: deploy
  CACHE_TAG: gems

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # id-token: write # needed for keyless signing
      packages: write # needed for ghcr access
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@bc1dd263b68cb5626dbb55d5c89777d79372c484
        if: "${{ github.event.inputs.dockerTarget == 'base' }}"
        with:
          ruby-version: '3.1.4'

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        if: "${{ github.event.inputs.dockerTarget == 'base' }}"
        with:
          target: wasm32-wasi

      - name: Add local bin to path (wasm-strip, wasm-opt)
        shell: bash
        if: "${{ github.event.inputs.dockerTarget == 'base'}}"
        run: |
          mkdir -p "${HOME}/.local/bin"
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Restore Cache (binaries) wasm-opt, wasm-strip, stat.wasm
        uses: actions/cache/restore@v3
        id: cache-restore
        if: "${{ github.event.inputs.dockerTarget != 'base' }}"
        with:
          path: "/home/runner/.local/bin"
          key: ${{ runner.os }}-wabt_${{ env.WABT_VERSION }}

      - name: Cache (binaries) wasm-opt, wasm-strip, stat.wasm
        uses: actions/cache@v3
        id: cache
        if: "${{ github.event.inputs.dockerTarget == 'base' }}"
        with:
          path: "/home/runner/.local/bin"
          key: ${{ runner.os }}-wabt_${{ env.WABT_VERSION }}

      - name: Install wabt, binaryen
        uses: kingdonb/setup-wabt@v1.0.5
        if: "${{ github.event.inputs.dockerTarget == 'base' && steps.cache.outputs.cache-hit != 'true' }}"
        with:
          version: ${{ env.WABT_VERSION }}
          version2: ${{ env.BINARYEN_VERSION }}

      - name: Copy to path (wasm-strip, wasm-opt)
        shell: bash
        if: "${{ github.event.inputs.dockerTarget == 'base' && steps.cache.outputs.cache-hit != 'true' }}"
        run: |
          cp "${HOME}/.wabt_${{ env.WABT_VERSION }}/bin/wasm-strip" "${HOME}/.local/bin"
          cp "${HOME}/.binaryen_${{ env.BINARYEN_VERSION }}/bin/wasm-opt" "${HOME}/.local/bin"

      - name: Build Wasm
        shell: bash
        if: "${{ github.event.inputs.dockerTarget == 'base'}}"
        run: |
          make -C lib stat.wasm
          cp lib/stat.wasm "${HOME}/.local/bin"

      - name: Restore Wasm
        shell: bash
        if: "${{ github.event.inputs.dockerTarget != 'base'}}"
        run: |
          cp "${HOME}/.local/bin/stat.wasm" lib/stat.wasm

      - name: Build and push canary
        uses: docker/build-push-action@v4
        if: "${{ github.event.inputs.dockerTarget != 'base'}}"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # sbom: true
          # provenance: true
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ env.IMAGE_TAG }}:canary
          target: deploy
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CACHE_IMAGE=${{ env.IMAGE_TAG }}:${{ github.event.inputs.cacheTag || env.GEM_CACHE_TAG }}

      # - name: Install cosign
      #   uses: sigstore/cosign-installer@v3

      # - name: Sign OCI artifacts
      #   env:
      #     COSIGN_EXPERIMENTAL: 1
      #   run: |
      #     cosign sign $IMAGE_TAG:latest --yes
